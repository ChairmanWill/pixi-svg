{"version":3,"file":"pixi-svg.js","sources":["../src/dPathParser.js","../src/SVG.js"],"sourcesContent":["/**\n * d-path-parser - v1.0.0\n * by Massimo Artizzu (MaxArt2501)\n *\n * https://github.com/MaxArt2501/d-path-parser\n *\n * Licensed under the MIT License\n * See LICENSE for details\n */\nconst re = {\n    command: /\\s*([achlmqstvz])/gi,\n    number: /\\s*([+-]?\\d*\\.?\\d+(?:e[+-]?\\d+)?)/gi,\n    comma: /\\s*(?:(,)|\\s)/g,\n    flag: /\\s*([01])/g,\n};\n\nfunction dPathParser(d)\n{\n    let index = 0;\n    const commands = [];\n\n    const get = (what, must) =>\n    {\n        re[what].lastIndex = index;\n        const res = re[what].exec(d);\n\n        if (!res || res.index !== index)\n        {\n            if (!must) return null;\n            throw Error(`Expected ${what} at position ${index}`);\n        }\n\n        index = re[what].lastIndex;\n\n        return res[1];\n    };\n\n    const matchers = {\n        number: (must) => Number(get('number', must)),\n        'coordinate pair': (must) =>\n        {\n            const x = get('number', must);\n\n            if (x === null && !must) return null;\n            get('comma');\n            const y = get('number', true);\n\n            return { x: Number(x), y: Number(y) };\n        },\n        'arc definition': (must) =>\n        {\n            const radii = matchers['coordinate pair'](must);\n\n            if (!radii && !must)\n            {\n                return null;\n            }\n            get('comma');\n            const rotation = Number(get('number', true));\n\n            get('comma', true);\n            const large = !!Number(get('flag', true));\n\n            get('comma');\n            const clockwise = !!Number(get('flag', true));\n\n            get('comma');\n            const end = matchers['coordinate pair'](true);\n\n            return {\n                radii,\n                rotation,\n                large,\n                clockwise,\n                end,\n            };\n        },\n    };\n\n    const getSequence = (what) =>\n    {\n        const sequence = [];\n        let matched;\n        let must = true;\n\n        // eslint-disable-next-line no-cond-assign\n        while (matched = matchers[what](must))\n        {\n            sequence.push(matched);\n            must = !!get('comma');\n        }\n\n        return sequence;\n    };\n\n    while (index < d.length)\n    {\n        let cmd = get('command');\n        const upcmd = cmd.toUpperCase();\n        const relative = cmd !== upcmd;\n        let sequence;\n\n        switch (upcmd)\n        {\n            case 'M':\n                sequence = getSequence('coordinate pair').map((coords, i) =>\n                {\n                    if (i === 1) cmd = relative ? 'l' : 'L';\n\n                    return { end: coords, code: cmd, relative };\n                });\n                break;\n            case 'L':\n            case 'T':\n                sequence = getSequence('coordinate pair').map((coords) =>\n                    ({ end: coords, code: cmd, relative }),\n                );\n                break;\n            case 'C':\n                sequence = getSequence('coordinate pair');\n                if (sequence.length % 3)\n                {\n                    throw Error(`Expected coordinate pair triplet at position ${index}`);\n                }\n\n                sequence = sequence.reduce((seq, coords, i) =>\n                {\n                    const rest = i % 3;\n\n                    if (!rest)\n                    {\n                        seq.push({ cp1: coords, code: cmd, relative });\n                    }\n                    else\n                    {\n                        const last = seq[seq.length - 1];\n\n                        last[rest === 1 ? 'cp2' : 'end'] = coords;\n                    }\n\n                    return seq;\n                }, []);\n\n                break;\n            case 'Q':\n            case 'S':\n                sequence = getSequence('coordinate pair');\n\n                if (sequence.length & 1)\n                {\n                    throw Error(`Expected coordinate pair couple at position ${index}`);\n                }\n\n                sequence = sequence.reduce((seq, coords, i) =>\n                {\n                    const odd = i & 1;\n\n                    if (!odd)\n                    {\n                        seq.push({ cp: coords, code: cmd, relative });\n                    }\n                    else\n                    {\n                        const last = seq[seq.length - 1];\n\n                        last.end = coords;\n                    }\n\n                    return seq;\n                }, []);\n\n                break;\n            case 'H':\n            case 'V':\n                sequence = getSequence('number').map((value) =>\n                    ({ value, code: cmd, relative }),\n                );\n                break;\n            case 'A':\n                sequence = getSequence('arc definition').map((obj) =>\n                    Object.assign({ code: cmd, relative }, obj),\n                );\n                break;\n            case 'Z':\n                sequence = [{ code: 'Z' }];\n                break;\n        }\n        commands.push.apply(commands, sequence);\n    }\n\n    return commands;\n}\n\nexport { dPathParser };\n","import { Graphics } from '@pixi/graphics';\nimport { dPathParser } from './dPathParser';\n\n/**\n * Scalable Graphics drawn from SVG image document.\n * @class SVG\n * @extends PIXI.Graphics\n * @memberof PIXI\n * @param {SVGSVGElement} svg - SVG Element `<svg>`\n */\nclass SVG extends Graphics\n{\n    constructor(svg)\n    {\n        super();\n        this._svgFill(svg);\n        this._svgChildren(svg.children);\n    }\n\n    /**\n     * Create a PIXI Graphic from SVG element\n     * @private\n     * @method\n     * @param {Array<*>} children - Collection of SVG nodes\n     * @param {Boolean} [inherit=false] Whether to inherit fill settings.\n     */\n    _svgChildren(children, inherit = false)\n    {\n        for (let i = 0; i < children.length; i++)\n        {\n            const child = children[i];\n\n            this._svgFill(child, inherit);\n            switch (child.nodeName.toLowerCase())\n            {\n                case 'path': {\n                    this._svgPath(child);\n                    break;\n                }\n                case 'circle':\n                case 'ellipse': {\n                    this._svgCircle(child);\n                    break;\n                }\n                case 'rect': {\n                    this._svgRect(child);\n                    break;\n                }\n                case 'polygon': {\n                    this._svgPoly(child, true);\n                    break;\n                }\n                case 'polyline': {\n                    this._svgPoly(child);\n                    break;\n                }\n                case 'g': {\n                    break;\n                }\n                default: {\n                    // eslint-disable-next-line no-console\n                    console.info(`[PIXI.SVG] <${child.nodeName}> elements unsupported`);\n                    break;\n                }\n            }\n            this._svgChildren(child.children, true);\n        }\n    }\n\n    /**\n     * Convert the Hexidecimal string (e.g., \"#fff\") to uint\n     * @private\n     * @method\n     */\n    _hexToUint(hex)\n    {\n        if (hex[0] === '#')\n        {\n            // Remove the hash\n            hex = hex.substr(1);\n\n            // Convert shortcolors fc9 to ffcc99\n            if (hex.length === 3)\n            {\n                hex = hex.replace(/([a-f0-9])/ig, '$1$1');\n            }\n\n            return parseInt(hex, 16);\n        }\n\n        const measureColor = SVG.measureColor;\n\n        measureColor.style.color = hex;\n        const rgb = window.getComputedStyle(document.body.appendChild(measureColor)).color\n            .match(/\\d+/g)\n            .map((a) => parseInt(a, 10));\n\n        document.body.removeChild(measureColor);\n\n        return (rgb[0] << 16) + (rgb[1] << 8) + rgb[2];\n    }\n\n    /**\n     * Render a <ellipse> element or <circle> element\n     * @private\n     * @method\n     * @param {SVGCircleElement} node\n     */\n    _svgCircle(node)\n    {\n        let heightProp = 'r';\n        let widthProp = 'r';\n        const isEllipse = node.nodeName === 'elipse';\n\n        if (isEllipse)\n        {\n            heightProp += 'x';\n            widthProp += 'y';\n        }\n        const width = parseFloat(node.getAttribute(widthProp));\n        const height = parseFloat(node.getAttribute(heightProp));\n        const cx = node.getAttribute('cx');\n        const cy = node.getAttribute('cy');\n        let x = 0;\n        let y = 0;\n\n        if (cx !== null)\n        {\n            x = parseFloat(cx);\n        }\n        if (cy !== null)\n        {\n            y = parseFloat(cy);\n        }\n        if (!isEllipse)\n        {\n            this.drawCircle(x, y, width);\n        }\n        else\n        {\n            this.drawEllipse(x, y, width, height);\n        }\n    }\n\n    /**\n     * Render a <rect> element\n     * @private\n     * @method\n     * @param {SVGRectElement} node\n     */\n    _svgRect(node)\n    {\n        const x = parseFloat(node.getAttribute('x'));\n        const y = parseFloat(node.getAttribute('y'));\n        const width = parseFloat(node.getAttribute('width'));\n        const height = parseFloat(node.getAttribute('height'));\n        const rx = parseFloat(node.getAttribute('rx'));\n\n        if (rx)\n        {\n            this.drawRoundedRect(x, y, width, height, rx);\n        }\n        else\n        {\n            this.drawRect(x, y, width, height);\n        }\n    }\n\n    /**\n     * Get the style property and parse options.\n     * @private\n     * @method\n     * @param {SVGElement} node\n     * @return {Object} Style attributes\n     */\n    _svgStyle(node)\n    {\n        const style = node.getAttribute('style');\n        const result = {\n            fill: node.getAttribute('fill'),\n            opacity: node.getAttribute('opacity'),\n            stroke: node.getAttribute('stroke'),\n            strokeWidth: node.getAttribute('stroke-width'),\n            cap: node.getAttribute('stroke-linecap'),\n            join: node.getAttribute('stroke-linejoin'),\n            miterLimit: node.getAttribute('stroke-miterlimit'),\n        };\n\n        if (style !== null)\n        {\n            style.split(';').forEach((prop) =>\n            {\n                const [name, value] = prop.split(':');\n\n                if (name)\n                {\n                    result[name.trim()] = value.trim();\n                }\n            });\n            if (result['stroke-width'])\n            {\n                result.strokeWidth = result['stroke-width'];\n                delete result['stroke-width'];\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Render a polyline element.\n     * @private\n     * @method\n     * @param {SVGPolylineElement} node\n     */\n    _svgPoly(node, close)\n    {\n        const points = node.getAttribute('points')\n            .split(/[ ,]/g)\n            .map((p) => parseInt(p, 10));\n\n        this.drawPolygon(points);\n\n        if (close)\n        {\n            this.closePath();\n        }\n    }\n\n    /**\n     * Set the fill and stroke style.\n     * @private\n     * @method\n     * @param {SVGElement} node\n     * @param {Boolean} inherit\n     */\n    _svgFill(node, inherit)\n    {\n        const { fill, opacity, stroke, strokeWidth, cap, join, miterLimit } = this._svgStyle(node);\n        const defaultLineWidth = stroke !== null ? 1 : 0;\n        const lineWidth = strokeWidth !== null ? parseFloat(strokeWidth) : defaultLineWidth;\n        const lineColor = stroke !== null ? this._hexToUint(stroke) : this.lineColor;\n\n        if (fill)\n        {\n            if (fill === 'none')\n            {\n                this.beginFill(0, 0);\n            }\n            else\n            {\n                this.beginFill(\n                    this._hexToUint(fill),\n                    opacity !== null ? parseFloat(opacity) : 1,\n                );\n            }\n        }\n        else if (!inherit)\n        {\n            this.beginFill(0);\n        }\n\n        this.lineStyle({\n            width: stroke === null && strokeWidth === null && inherit ? this.line.width : lineWidth,\n            color: stroke === null && inherit ? this.line.color : lineColor,\n            cap: cap === null && inherit ? this.line.cap : cap,\n            join: join === null && inherit ? this.line.join : join,\n            miterLimit: miterLimit === null && inherit ? this.line.miterLimit : parseFloat(miterLimit),\n        });\n\n        if (node.getAttribute('fill-rule'))\n        {\n            // eslint-disable-next-line no-console\n            console.info('[PIXI.SVG] \"fill-rule\" attribute is not supported');\n        }\n    }\n\n    /**\n     * Render a <path> d element\n     * @method\n     * @param {SVGPathElement} node\n     */\n    _svgPath(node)\n    {\n        const d = node.getAttribute('d');\n        let x; let\n            y;\n        const commands = dPathParser(d);\n\n        for (let i = 0; i < commands.length; i++)\n        {\n            const command = commands[i];\n\n            switch (command.code)\n            {\n                case 'm': {\n                    this.moveTo(\n                        x += command.end.x,\n                        y += command.end.y,\n                    );\n                    break;\n                }\n                case 'M': {\n                    this.moveTo(\n                        x = command.end.x,\n                        y = command.end.y,\n                    );\n                    break;\n                }\n                case 'H': {\n                    this.lineTo(x = command.value, y);\n                    break;\n                }\n                case 'h': {\n                    this.lineTo(x += command.value, y);\n                    break;\n                }\n                case 'V': {\n                    this.lineTo(x, y = command.value);\n                    break;\n                }\n                case 'v': {\n                    this.lineTo(x, y += command.value);\n                    break;\n                }\n                case 'Z': {\n                    this.closePath();\n                    break;\n                }\n                case 'L': {\n                    this.lineTo(\n                        x = command.end.x,\n                        y = command.end.y,\n                    );\n                    break;\n                }\n                case 'l': {\n                    this.lineTo(\n                        x += command.end.x,\n                        y += command.end.y,\n                    );\n                    break;\n                }\n                case 'C': {\n                    this.bezierCurveTo(\n                        command.cp1.x,\n                        command.cp1.y,\n                        command.cp2.x,\n                        command.cp2.y,\n                        x = command.end.x,\n                        y = command.end.y,\n                    );\n                    break;\n                }\n                case 'c': {\n                    const currX = x;\n                    const currY = y;\n\n                    this.bezierCurveTo(\n                        currX + command.cp1.x,\n                        currY + command.cp1.y,\n                        currX + command.cp2.x,\n                        currY + command.cp2.y,\n                        x += command.end.x,\n                        y += command.end.y,\n                    );\n                    break;\n                }\n                case 's':\n                case 'q': {\n                    const currX = x;\n                    const currY = y;\n\n                    this.quadraticCurveTo(\n                        currX + command.cp.x,\n                        currY + command.cp.y,\n                        x += command.end.x,\n                        y += command.end.y,\n                    );\n                    break;\n                }\n                case 'S':\n                case 'Q': {\n                    this.quadraticCurveTo(\n                        command.cp.x,\n                        command.cp.y,\n                        x = command.end.x,\n                        y = command.end.y,\n                    );\n                    break;\n                }\n                default: {\n                    // eslint-disable-next-line no-console\n                    console.info('[PIXI.SVG] Draw command not supported:', command.code, command);\n                    break;\n                }\n            }\n        }\n    }\n}\n\n/**\n * <div> element to measure string colors like \"black\"\n * and convert to hex colors\n * @private\n */\nSVG.measureColor = document.createElement('div');\n\nexport { SVG };\n\n"],"names":["const","re","command","number","comma","flag","SVG","svg","super","this","_svgFill","_svgChildren","children","inherit","let","i","length","child","nodeName","toLowerCase","_svgPath","_svgCircle","_svgRect","_svgPoly","console","info","_hexToUint","hex","substr","replace","parseInt","measureColor","style","color","rgb","window","getComputedStyle","document","body","appendChild","match","map","a","removeChild","node","heightProp","widthProp","isEllipse","width","parseFloat","getAttribute","height","cx","cy","x","y","drawEllipse","drawCircle","rx","drawRoundedRect","drawRect","_svgStyle","result","fill","opacity","stroke","strokeWidth","cap","join","miterLimit","split","forEach","prop","name","trim","value","close","points","p","drawPolygon","closePath","defaultLineWidth","lineWidth","lineColor","beginFill","lineStyle","line","commands","d","index","get","what","must","lastIndex","res","exec","Error","matchers","Number","coordinate pair","arc definition","radii","rotation","large","clockwise","getSequence","matched","sequence","push","cmd","upcmd","toUpperCase","relative","coords","end","code","reduce","seq","rest","cp1","cp","obj","Object","assign","apply","dPathParser","moveTo","lineTo","bezierCurveTo","cp2","currX","currY","quadraticCurveTo","Graphics","createElement"],"mappings":"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"}