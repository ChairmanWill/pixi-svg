{"version":3,"file":"pixi-svg.cjs.js","sources":["../src/SVG.js"],"sourcesContent":["import { Graphics } from '@pixi/graphics';\nimport dPathParser from 'd-path-parser';\nimport color from 'tinycolor2';\n\n/**\n * Scalable Graphics drawn from SVG image document.\n * @class SVG\n * @extends PIXI.Graphics\n * @memberof PIXI\n * @param {SVGSVGElement|SVGElement|string} [svg] - Inline SVGElement `<svg>` or buffer.\n */\nclass SVG extends Graphics\n{\n    constructor(svg)\n    {\n        super();\n\n        if (svg)\n        {\n            this.drawSVG(svg);\n        }\n    }\n\n    /**\n     * Draw an SVG element.\n     * @method PIXI.SVG#drawSVG\n     * @param {SVGSVGElement|SVGElement|string} svg - Inline SVGElement `<svg>` or buffer.\n     * @return {PIXI.SVG} Element suitable for chaining.\n     */\n    drawSVG(svg)\n    {\n        if (typeof svg === 'string')\n        {\n            const div = document.createElement('div');\n\n            div.innerHTML = svg.trim();\n            svg = div.querySelector('svg');\n        }\n\n        if (!svg)\n        {\n            throw new Error('Missing <svg> element in SVG constructor');\n        }\n\n        this._svgFill(svg);\n        this._svgChildren(svg.children);\n\n        return this;\n    }\n\n    /**\n     * Create a PIXI Graphic from SVG element\n     * @private\n     * @method\n     * @param {Array<*>} children - Collection of SVG nodes\n     * @param {Boolean} [inherit=false] Whether to inherit fill settings.\n     */\n    _svgChildren(children, inherit = false)\n    {\n        for (let i = 0; i < children.length; i++)\n        {\n            const child = children[i];\n\n            this._svgFill(child, inherit);\n            switch (child.nodeName.toLowerCase())\n            {\n                case 'path': {\n                    this._svgPath(child);\n                    break;\n                }\n                case 'circle':\n                case 'ellipse': {\n                    this._svgCircle(child);\n                    break;\n                }\n                case 'rect': {\n                    this._svgRect(child);\n                    break;\n                }\n                case 'polygon': {\n                    this._svgPoly(child, true);\n                    break;\n                }\n                case 'polyline': {\n                    this._svgPoly(child);\n                    break;\n                }\n                case 'g': {\n                    break;\n                }\n                default: {\n                    // eslint-disable-next-line no-console\n                    console.info(`[PIXI.SVG] <${child.nodeName}> elements unsupported`);\n                    break;\n                }\n            }\n            this._svgChildren(child.children, true);\n        }\n    }\n\n    /**\n     * Convert the Hexidecimal string (e.g., \"#fff\") to uint\n     * @private\n     * @method\n     */\n    _hexToUint(hex)\n    {\n        if (hex[0] === '#')\n        {\n            // Remove the hash\n            hex = hex.substr(1);\n\n            // Convert shortcolors fc9 to ffcc99\n            if (hex.length === 3)\n            {\n                hex = hex.replace(/([a-f0-9])/ig, '$1$1');\n            }\n\n            return parseInt(hex, 16);\n        }\n\n        const { r, g, b } = color(hex).toRgb();\n\n        return (r << 16) + (g << 8) + b;\n    }\n\n    /**\n     * Render a <ellipse> element or <circle> element\n     * @private\n     * @method\n     * @param {SVGCircleElement} node\n     */\n    _svgCircle(node)\n    {\n        let heightProp = 'r';\n        let widthProp = 'r';\n        const isEllipse = node.nodeName === 'elipse';\n\n        if (isEllipse)\n        {\n            heightProp += 'x';\n            widthProp += 'y';\n        }\n        const width = parseFloat(node.getAttribute(widthProp));\n        const height = parseFloat(node.getAttribute(heightProp));\n        const cx = node.getAttribute('cx');\n        const cy = node.getAttribute('cy');\n        let x = 0;\n        let y = 0;\n\n        if (cx !== null)\n        {\n            x = parseFloat(cx);\n        }\n        if (cy !== null)\n        {\n            y = parseFloat(cy);\n        }\n        if (!isEllipse)\n        {\n            this.drawCircle(x, y, width);\n        }\n        else\n        {\n            this.drawEllipse(x, y, width, height);\n        }\n    }\n\n    /**\n     * Render a <rect> element\n     * @private\n     * @method\n     * @param {SVGRectElement} node\n     */\n    _svgRect(node)\n    {\n        const x = parseFloat(node.getAttribute('x'));\n        const y = parseFloat(node.getAttribute('y'));\n        const width = parseFloat(node.getAttribute('width'));\n        const height = parseFloat(node.getAttribute('height'));\n        const rx = parseFloat(node.getAttribute('rx'));\n\n        if (rx)\n        {\n            this.drawRoundedRect(x, y, width, height, rx);\n        }\n        else\n        {\n            this.drawRect(x, y, width, height);\n        }\n    }\n\n    /**\n     * Get the style property and parse options.\n     * @private\n     * @method\n     * @param {SVGElement} node\n     * @return {Object} Style attributes\n     */\n    _svgStyle(node)\n    {\n        const style = node.getAttribute('style');\n        const result = {\n            fill: node.getAttribute('fill'),\n            opacity: node.getAttribute('opacity'),\n            stroke: node.getAttribute('stroke'),\n            strokeWidth: node.getAttribute('stroke-width'),\n            cap: node.getAttribute('stroke-linecap'),\n            join: node.getAttribute('stroke-linejoin'),\n            miterLimit: node.getAttribute('stroke-miterlimit'),\n        };\n\n        if (style !== null)\n        {\n            style.split(';').forEach((prop) =>\n            {\n                const [name, value] = prop.split(':');\n\n                if (name)\n                {\n                    result[name.trim()] = value.trim();\n                }\n            });\n            if (result['stroke-width'])\n            {\n                result.strokeWidth = result['stroke-width'];\n                delete result['stroke-width'];\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Render a polyline element.\n     * @private\n     * @method\n     * @param {SVGPolylineElement} node\n     */\n    _svgPoly(node, close)\n    {\n        const points = node.getAttribute('points')\n            .split(/[ ,]/g)\n            .map((p) => parseInt(p, 10));\n\n        this.drawPolygon(points);\n\n        if (close)\n        {\n            this.closePath();\n        }\n    }\n\n    /**\n     * Set the fill and stroke style.\n     * @private\n     * @method\n     * @param {SVGElement} node\n     * @param {Boolean} inherit\n     */\n    _svgFill(node, inherit)\n    {\n        const { fill, opacity, stroke, strokeWidth, cap, join, miterLimit } = this._svgStyle(node);\n        const defaultLineWidth = stroke !== null ? 1 : 0;\n        const lineWidth = strokeWidth !== null ? parseFloat(strokeWidth) : defaultLineWidth;\n        const lineColor = stroke !== null ? this._hexToUint(stroke) : this.lineColor;\n\n        if (fill)\n        {\n            if (fill === 'none')\n            {\n                this.beginFill(0, 0);\n            }\n            else\n            {\n                this.beginFill(\n                    this._hexToUint(fill),\n                    opacity !== null ? parseFloat(opacity) : 1,\n                );\n            }\n        }\n        else if (!inherit)\n        {\n            this.beginFill(0);\n        }\n\n        this.lineStyle({\n            width: stroke === null && strokeWidth === null && inherit ? this.line.width : lineWidth,\n            color: stroke === null && inherit ? this.line.color : lineColor,\n            cap: cap === null && inherit ? this.line.cap : cap,\n            join: join === null && inherit ? this.line.join : join,\n            miterLimit: miterLimit === null && inherit ? this.line.miterLimit : parseFloat(miterLimit),\n        });\n\n        if (node.getAttribute('fill-rule'))\n        {\n            // eslint-disable-next-line no-console\n            console.info('[PIXI.SVG] \"fill-rule\" attribute is not supported');\n        }\n    }\n\n    /**\n     * Render a <path> d element\n     * @method\n     * @param {SVGPathElement} node\n     */\n    _svgPath(node)\n    {\n        const d = node.getAttribute('d');\n        let x;\n        let y;\n        const commands = dPathParser(d.trim());\n\n        for (let i = 0; i < commands.length; i++)\n        {\n            const command = commands[i];\n\n            switch (command.code)\n            {\n                case 'm': {\n                    this.moveTo(\n                        x += command.end.x,\n                        y += command.end.y,\n                    );\n                    break;\n                }\n                case 'M': {\n                    this.moveTo(\n                        x = command.end.x,\n                        y = command.end.y,\n                    );\n                    break;\n                }\n                case 'H': {\n                    this.lineTo(x = command.value, y);\n                    break;\n                }\n                case 'h': {\n                    this.lineTo(x += command.value, y);\n                    break;\n                }\n                case 'V': {\n                    this.lineTo(x, y = command.value);\n                    break;\n                }\n                case 'v': {\n                    this.lineTo(x, y += command.value);\n                    break;\n                }\n                case 'Z': {\n                    this.closePath();\n                    break;\n                }\n                case 'L': {\n                    this.lineTo(\n                        x = command.end.x,\n                        y = command.end.y,\n                    );\n                    break;\n                }\n                case 'l': {\n                    this.lineTo(\n                        x += command.end.x,\n                        y += command.end.y,\n                    );\n                    break;\n                }\n                case 'C': {\n                    this.bezierCurveTo(\n                        command.cp1.x,\n                        command.cp1.y,\n                        command.cp2.x,\n                        command.cp2.y,\n                        x = command.end.x,\n                        y = command.end.y,\n                    );\n                    break;\n                }\n                case 'c': {\n                    const currX = x;\n                    const currY = y;\n\n                    this.bezierCurveTo(\n                        currX + command.cp1.x,\n                        currY + command.cp1.y,\n                        currX + command.cp2.x,\n                        currY + command.cp2.y,\n                        x += command.end.x,\n                        y += command.end.y,\n                    );\n                    break;\n                }\n                case 's':\n                case 'q': {\n                    const currX = x;\n                    const currY = y;\n\n                    this.quadraticCurveTo(\n                        currX + command.cp.x,\n                        currY + command.cp.y,\n                        x += command.end.x,\n                        y += command.end.y,\n                    );\n                    break;\n                }\n                case 'S':\n                case 'Q': {\n                    this.quadraticCurveTo(\n                        command.cp.x,\n                        command.cp.y,\n                        x = command.end.x,\n                        y = command.end.y,\n                    );\n                    break;\n                }\n                default: {\n                    // eslint-disable-next-line no-console\n                    console.info('[PIXI.SVG] Draw command not supported:', command.code, command);\n                    break;\n                }\n            }\n        }\n    }\n}\n\nexport { SVG };\n"],"names":["SVG","svg","super","this","drawSVG","const","div","document","createElement","innerHTML","trim","querySelector","Error","_svgFill","_svgChildren","children","inherit","let","i","length","child","nodeName","toLowerCase","_svgPath","_svgCircle","_svgRect","_svgPoly","console","info","_hexToUint","hex","substr","replace","parseInt","color","toRgb","node","heightProp","widthProp","isEllipse","width","parseFloat","getAttribute","height","cx","cy","x","y","drawEllipse","drawCircle","rx","drawRoundedRect","drawRect","_svgStyle","style","result","fill","opacity","stroke","strokeWidth","cap","join","miterLimit","split","forEach","prop","name","value","close","points","map","p","drawPolygon","closePath","defaultLineWidth","lineWidth","lineColor","beginFill","lineStyle","line","d","commands","dPathParser","command","code","moveTo","end","lineTo","bezierCurveTo","cp1","cp2","currX","currY","quadraticCurveTo","cp","Graphics"],"mappings":"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"}